@typeparam TEnum where TEnum : Enum

<MudSelect T="TEnum"
           Label="@Label"
           For="For"
           Value="Value"
           ValueChanged="ValueChanged"
           Disabled="Disabled"
           Margin="Margin">

    @foreach (var value in Enum.GetValues(typeof(TEnum)).Cast<TEnum>())
    {
        @if (IgnoreValues?.Contains(value) is not true)
        {
            <MudSelectItem Value="value">@value.ToString()</MudSelectItem>
        }
    }
</MudSelect>

@code {
    [Parameter]
    public string Label { get; set; } = default!;
    [Parameter]
    public Expression<Func<TEnum>> For { get; set; } = default!;
    [Parameter]
    public TEnum Value { get; set; } = default!;
    [Parameter]
    public EventCallback<TEnum> ValueChanged { get; set; }
    [Parameter]
    public bool Disabled { get; set; } = default!;
    [Parameter]
    public Margin Margin { get; set; }
    [Parameter]
    public ICollection<TEnum>? IgnoreValues { get; set; }
}